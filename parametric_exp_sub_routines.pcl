### Global Variable

int block_index = 1;



# Return a 2d-array. One states the interval index, another states whether it is deviant
sub 
	array<int,2> assignDeviant(int interval_cond, array<int> index_of_whole_block[])
begin
	#initialize the array going to be returned
	array <int> stim_list[2][setting_interval_in_block]; # 2 elements


	# create the list of whether this is deviant of this block (1 = deviant, 0 = standard)
	array <int> whether_deviant[setting_interval_in_block];
	# initialize it to be all zeros
	whether_deviant.fill(1, whether_deviant.count(),0,0);

	# assign 96 deviant to it
	# initialize a counter of an interval being deviant
	array <int> counter_deviant[interval_cond]; # [1] will store the number of time of the 1st interval, [2] stores 2nd interval...
	int max_time_being_deviant = setting_deviant_in_block/interval_cond; # the maximum number of time of each interval being a deviant

	loop int i = 1 until i > setting_deviant_in_block begin # for each deviant
		
		# try to insert it to a random position. Insert will only be successful when all conditions met
		loop bool insert_successful = false until insert_successful == true begin
			# get a random index for inserting the deviant
			int insert_position = random(1, setting_interval_in_block); 
			# if the insert_position is in the first n-th trial, do not insert. The deviant has to be preceeded by at least n-th standards.
			if insert_position <= setting_deviant_min_trial_apart then
				insert_successful = false;
				continue; # go to next loop
			end;
			
			#only turn it to deviant when it is not one yet. The backward and forward 3 trials should not be deivant
			bool have_deviant_forward_backward = false;
			int num_backward_forward = setting_deviant_min_trial_apart;
			loop int j = 1 until j > num_backward_forward begin
				if insert_position + j <= setting_interval_in_block then # check whether it is out of bound
					if whether_deviant[insert_position + j] == 1 then
						have_deviant_forward_backward = true;
						break;
					end;
				end;
				
				if insert_position - j >= 1 then # check whether it is out of bound
					if whether_deviant[insert_position - j] == 1 then
						have_deviant_forward_backward = true;
						break;
					end;
				end; 
				
				j = j + 1;
			end;#end of looping backward / forward
			
			if whether_deviant[insert_position] == 0 && have_deviant_forward_backward == false then 
				int insert_target_stim_index = index_of_whole_block[insert_position]; # get which stimulus this trial is
				# check the counter array to see whether this stim not yet exceed maximum deviant num
				if counter_deviant[insert_target_stim_index] < max_time_being_deviant then
					whether_deviant[insert_position] = 1;
					counter_deviant[insert_target_stim_index] = counter_deviant[insert_target_stim_index] +1;
					insert_successful = true;
				end; # end of if the stim not yet exceed max time
			end; # end of if position is 0
		end;
		
		i = i + 1;
	end;

	stim_list[1] = index_of_whole_block;
	stim_list[2] = whether_deviant;
	
	term.print_line(counter_deviant);
	
	return(stim_list);
end; # END OF assignDeviant


# create the list of stimuli of all trials in this block according to the regular_cond and interval_cond
# regular_cond (1: regular, 2: irregular)
# interval_cond (1, 2, 4, 16)
sub
	array<int,1> getBlockStimList(int regular_cond, int interval_cond)
begin
	# initialize a result variable
	array <int> stim_index_of_whole_block[0];

	# get the according regular order list based on the condition
	array <int> regular_order_list[0];
	if interval_cond == 1 then
		regular_order_list.append(order_1intervals);
	end;
	if interval_cond == 2 then
		regular_order_list.append(order_2intervals);
	end;
	if interval_cond == 4 then
		regular_order_list.append(order_4intervals);
	end;
	if interval_cond == 16 then
		regular_order_list.append(order_16intervals);
	end;

	if regular_cond == 1 then
		loop int i = 1 until i > (setting_interval_in_block / interval_cond) begin # the sequence will repeat for [480 / 4 intervals] times
			stim_index_of_whole_block.append(regular_order_list);
			i = i+1;
		end;
	end; # END OF regular_cond==1
	
	# for 1-interval "irregular" (it should be the same as 1-interval regular)
	if regular_cond == 2 && interval_cond == 1 then
		loop int i = 1 until i > (setting_interval_in_block / interval_cond) begin # the sequence will repeat for [480 / 4 intervals] times
			stim_index_of_whole_block.append(regular_order_list);
			i = i+1;
		end;
	end; # END OF regular_cond==1

	# for irregular condition, the same pattern should not repeat more than 3 times (3 time is allowed)
	if regular_cond == 2 && interval_cond != 1 then

		# initialize variable for checking
		array <int> last_sequence[0];
		int same_pattern_counter = 1;

		loop int i = 1 until i > (setting_interval_in_block / interval_cond) begin
			array <int> this_sequence[] = regular_order_list;
			this_sequence.shuffle();

			if last_sequence.count() != 0 && this_sequence == last_sequence then
				same_pattern_counter = same_pattern_counter + 1;
				if same_pattern_counter > setting_maximum_same_pattern then
					loop until this_sequence != last_sequence begin
						this_sequence.shuffle();
					end;
					same_pattern_counter = 1;
				end;

			else
				same_pattern_counter = 1;
			end;
			#term.print(same_pattern_counter);term.print(",");

			stim_index_of_whole_block.append(this_sequence);

			last_sequence.assign(this_sequence);
			i = i + 1;
		end;
	end; # END of regular_cond == 2

	return(stim_index_of_whole_block);

end;


# a routine to set the sound stimulus in each trial
# it will also return the wav file duration and file name
sub 
	array<string,1> setSoundStim(int deviant_cond, array<sound,1> normal_sound, array<sound,1> rotate_sound, int stim_id, int is_deviant) 
begin
	
	# should always be active so that false alarm / hit can be recorded
	
	sound the_stim;

	# rotate as deviant
	if deviant_cond == 1 && is_deviant == 0 then
		the_stim = normal_sound[stim_id];
	end;
	if deviant_cond == 1 && is_deviant == 1 then
		the_stim = rotate_sound[stim_id]
	end;

	# rotate as normal
	if deviant_cond == 2 && is_deviant == 0 then
		the_stim = rotate_sound[stim_id]
	end;
	if deviant_cond == 2 && is_deviant == 1 then
		the_stim = normal_sound[stim_id];
	end;

	sound_event.set_stimulus(the_stim);
	sound_event.set_time(0);
	sound_event.set_target_button(is_deviant); # when it is not deviant, the target button should set to 0; when it is deviant, target button set to 1;
	if is_deviant == 1 then
		sound_event.set_stimulus_time_in(setting_response_window_start);
		sound_event.set_stimulus_time_out(setting_response_window_end);
	end;
	
	array <string> return_string[0];
	return_string.add(string(the_stim.get_wavefile().duration()));

	array <string> parts[0];
	the_stim.get_wavefile().filename().split("\\", parts);
	return_string.add(parts[parts.count()]);
	return(return_string);

end;

# -- Present General Instruction --
# A sub to present general insturction for whatever string
sub
	presentGeneralInstruct(string displayText)
begin
	instruct.set_caption(displayText);
	instruct.redraw();
	instruct_trial.present();
end;

# a routine for setting the event code and port code of the stimulus event
# event code is for logging to the log file
# port code is for logging to the EEG port (value of port_code must be an integer between and including 0 and 2147483647)
sub
	setEventCode_PortCode(int counterbalance_id, int stim_id, string wav_duration, string wav_filename, int deviant_cond, int regular_cond, int interval_cond, int is_deviant)
begin
	string my_event_code;
	string my_port_code;

	# define first 2 digits of the port code
	int first_two;
	if interval_cond == 1 then
		first_two = 1;
	elseif interval_cond == 2 then
		first_two = 1+stim_id;
	elseif interval_cond == 4 then
		first_two = 3+stim_id;
	elseif interval_cond == 16 then
		first_two = 7+stim_id;
	end;
	#define last digit of the port code
	int last_digit;
	if regular_cond == 1 then
		if deviant_cond == 1 then
			last_digit = 1;
		else
			last_digit = 3;
		end;
	else
		if deviant_cond == 1 then
			last_digit = 5;
		else
			last_digit = 7;
		end;
	end;
	
	if is_deviant == 1 then
		last_digit = last_digit + 1;
	end;
	
	# combine first two with last to get the port code
	my_port_code = string(first_two) + string(last_digit);


	string practice_main;
	if counterbalance_id == 88888 then
		practice_main = "practice";
		my_port_code = "249";
	else
		practice_main = "main";
	end;
	# event code
	my_event_code =  my_event_code + string(counterbalance_id) + ";" ;
	my_event_code = my_event_code + string(stim_id) + ";" ;
	my_event_code = my_event_code + wav_duration + ";" ;
	my_event_code = my_event_code + wav_filename + ";" ;
	my_event_code = my_event_code + practice_main + ";" ;
	my_event_code = my_event_code + string(deviant_cond) + ";" ;
	my_event_code = my_event_code + string(regular_cond) + ";" ;
	my_event_code = my_event_code + string(interval_cond) + ";" ;
	my_event_code = my_event_code + string(is_deviant) + ";" ;
	my_event_code = my_event_code + string(block_index) + ";" ;
	my_event_code = my_event_code + string(int(my_port_code)) + ";" ;
	if counterbalance_id == 88888 then
		my_event_code = my_event_code + "" + ";" ;
		my_event_code = my_event_code + "" + ";" ;
	else
		my_event_code = my_event_code + string(cbtable_int2_variation[counterbalance_id]) + ";" ;
		my_event_code = my_event_code + string(cbtable_int4_variation[counterbalance_id]) + ";" ;
	end;

	picture_event.set_event_code(my_event_code);
	sound_event.set_event_code(my_event_code);
	sound_event.set_port_code(int(my_port_code));

end;


# the routine to run the block given different conditions
sub
	double runBlock(int deviant_cond, int regular_cond, int interval_cond, int counterbalance_id)
begin

	##### Things to set before the whole block starts #####
	array <int> this_block_stim_list[] = getBlockStimList(regular_cond, interval_cond);
	array <int> this_block_stim_deviant[][] = assignDeviant(interval_cond, this_block_stim_list);
	# if counterbalance id = 88888, it means this is the practice trial, shorten the stim_list
	if counterbalance_id == 88888 then
		this_block_stim_list.resize(setting_practice_trial_num);
		this_block_stim_deviant[1].resize(setting_practice_trial_num);
		this_block_stim_deviant[2].resize(setting_practice_trial_num);
		this_block_stim_deviant[2].fill(1, this_block_stim_deviant[2].count(),0,0);
		this_block_stim_deviant[2][5] = 1;
		this_block_stim_deviant[2][13] = 1;
		this_block_stim_deviant[2][18] = 1;
		this_block_stim_deviant[2][22] = 1;
		this_block_stim_deviant[2][29] = 1;
	end;
	double total_hit = 0;
	double total_deviant = 0;

	# term.print_line(this_block_stim_deviant[1]);
	# term.print_line(this_block_stim_deviant[1]);

	# Find the according sound files of this interval_cond
	array <sound> normal_sound[0];
	array <sound> rotate_sound[0];
	if interval_cond == 1 then normal_sound.assign(soundfiles_1intervals); rotate_sound.assign(soundfiles_1intervals_rotated); end;
	if interval_cond == 16 then normal_sound.assign(soundfiles_16intervals); rotate_sound.assign(soundfiles_16intervals_rotated); end;
	
	# for 2 interval and 4 interval, the soundfiles have to be based on the counterbalancing
	# and the files are a subset of 16-interval soundfiles
	if interval_cond == 2 then
		# find the variation this participant has based on cb id
		array <int> soundfiles_int2[] = setting_int2_variation[cbtable_int2_variation[counterbalance_id]];
		loop int ii = 1 until ii > soundfiles_int2.count() begin
			normal_sound.add(soundfiles_16intervals[soundfiles_int2[ii]]);
			rotate_sound.add(soundfiles_16intervals_rotated[soundfiles_int2[ii]]);
			ii = ii + 1;
		end;
	end;

	if interval_cond == 4 then 
		# find the variation this participant has based on cb id
		array <int> soundfiles_int4[] = setting_int4_variation[cbtable_int4_variation[counterbalance_id]];
		loop int ii = 1 until ii > soundfiles_int4.count() begin
			normal_sound.add(soundfiles_16intervals[soundfiles_int4[ii]]);
			rotate_sound.add(soundfiles_16intervals_rotated[soundfiles_int4[ii]]);
			ii = ii + 1;
		end;
	
	end;
	

	##### END OF Things to set before the whole block starts #####

	# loop through trials
	loop int i = 1 until i > this_block_stim_list.count() begin
		array <string> wav_file_duration_filename[] = setSoundStim(deviant_cond, normal_sound, rotate_sound, this_block_stim_deviant[1][i], this_block_stim_deviant[2][i]);
		setEventCode_PortCode(counterbalance_id, this_block_stim_deviant[1][i], wav_file_duration_filename[1], wav_file_duration_filename[2], deviant_cond, regular_cond, interval_cond, this_block_stim_deviant[2][i]);
		
		sound_trial.present();

		
		# if this is the last trial, present an extra silence to wait for participant response
		if i == this_block_stim_list.count() then
			extra_silence.set_duration(setting_response_window_end);
			extra_silence.present();
		end;
		
		if this_block_stim_deviant[2][i]==1 then
			total_deviant = total_deviant + 1;
		end;

		total_hit = total_hit+response_manager.hits();

		i = i + 1;
	end; 

	return(total_hit/total_deviant)
	
end;


# a routine to run experiment based on the input id
sub
	runExperiment(int counterbalance_id)
begin
	# get this participant order based on his id
	array<int> user_deviant_block_order_list[] = setting_deviant_order[cbtable_deviant_order[counterbalance_id]];
	array<int> user_regular_block_order_list[] = setting_regular_order[cbtable_regular_order[counterbalance_id]];
	array<int> user_interval_block_order_list[] = setting_interval_order[cbtable_interval_order[counterbalance_id]];

	# term.print_line(user_deviant_block_order_list);
	# term.print_line(user_regular_block_order_list);
	# term.print_line(user_interval_block_order_list);

	loop int deviant_block_counter = 1 until deviant_block_counter > user_deviant_block_order_list.count() begin
		
		double hit_rate = 0;
		# Present the instruction & practice for each deviant block
		loop until hit_rate >= setting_practice_min_hit_rate begin
			presentGeneralInstruct(getTaskInstruction(user_deviant_block_order_list[deviant_block_counter]));
			# Start the practice trial
			hit_rate = runBlock(user_deviant_block_order_list[deviant_block_counter],1,1,88888);
			presentGeneralInstruct(getPracticeEndPage(hit_rate));
		end;

		loop int regular_block_counter = 1 until regular_block_counter > user_regular_block_order_list.count() begin
		
			loop int interval_block_counter = 1 until interval_block_counter > user_interval_block_order_list.count() begin
				runBlock(user_deviant_block_order_list[deviant_block_counter],
				user_regular_block_order_list[regular_block_counter],
				user_interval_block_order_list[interval_block_counter],
				counterbalance_id);

				# if this is the last block in the regular supra-block, do not need to present break
				if regular_block_counter == 2 && interval_block_counter == 4 then
				else
					presentGeneralInstruct(getBreakInstruction());
				end;

				block_index = block_index + 1;
				interval_block_counter = interval_block_counter + 1;
			end; # end of loop interval block
		
		regular_block_counter = regular_block_counter + 1;
		end; # end of loop regular block

		deviant_block_counter = deviant_block_counter+1;
	end; # end of loop deviant block

	presentGeneralInstruct(getExperimentEndPage());
end;

